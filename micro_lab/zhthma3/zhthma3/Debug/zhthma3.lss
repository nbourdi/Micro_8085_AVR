
zhthma3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000012e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005cd  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054e  00000000  00000000  00000789  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000203  00000000  00000000  00000cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ed  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

char x;

int main(void)
{
    DDRB=0xFF; // PORTB as output
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 bb       	out	0x17, r24	; 23
	DDRA=0x00; // PORTA as input
  80:	1a ba       	out	0x1a, r1	; 26
	
	x = 1;     // initially, led0 ON
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	while(1) 
	{
		if ((PINA & 0x01) == 1){		//SW0
  88:	c8 9b       	sbis	0x19, 0	; 25
  8a:	0e c0       	rjmp	.+28     	; 0xa8 <main+0x2c>
			while ((PINA & 0x01) == 1);    // wait for SW0 release
  8c:	c8 99       	sbic	0x19, 0	; 25
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x10>
			
			if (x == 128)		// overflow check
  90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  94:	80 38       	cpi	r24, 0x80	; 128
  96:	21 f4       	brne	.+8      	; 0xa0 <main+0x24>
				x = 1;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  9e:	07 c0       	rjmp	.+14     	; 0xae <main+0x32>
			else
				x = x<<1;	// shift left
  a0:	88 0f       	add	r24, r24
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a6:	03 c0       	rjmp	.+6      	; 0xae <main+0x32>
		}
		
		else if ((PINA & 0x02) == 1) {		// SW1
  a8:	89 b3       	in	r24, 0x19	; 25
				x = 128;
			else
				x = x>>1;	// shift right
		}
		
		else if ((PINA & 0x04) == 1) {		// SW2
  aa:	89 b3       	in	r24, 0x19	; 25
				x = 1;
			else
				x = x<<2;	// shift left
		}
		
		else if ((PINA & 0x08) == 1) {		//SW3
  ac:	89 b3       	in	r24, 0x19	; 25
			while ((PINA & 0x08) == 1);    // wait for SW3 release
			
			x = 128;
		}
		PORTB = x; // output to PORTB
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	88 bb       	out	0x18, r24	; 24
	}
  b4:	e9 cf       	rjmp	.-46     	; 0x88 <main+0xc>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
